//-----------------------------------------------------------------------
// <copyright file="SpotLightCore.glslinc" company="Google LLC">
//
// Copyright 2020 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// </copyright>
//-----------------------------------------------------------------------

uniform vec3 _LightAnchorPosition;

#define uTime (_Time.y)
#define uResolution (_ScreenParams.xy)
// Current anchor position, i.e., where the user touches.
#define uTouch (_LightAnchorPosition)

// Constants are used for runtime modes and physical constant properties.
const int kMode3DOcclusion = 0;
const int kMode3DDepth = 1;
const int kMode2D = 2;
const int kModeDepth = 3;
const vec3 kGamma = vec3(2.2);
const vec3 kGammaReciprocal = 1.0 / kGamma;
const float kAntiAliasing = 0.005;
const float kSpotLightRadius = 0.08;
const float kSpotLightRadiusDelta = 0.06;
const float kLight2DScale = 128.0;
const vec3 kSpotLightColor = vec3(1.0);
const float kVignetteIntensity = 1.5;
const vec3 kGreenColor = vec3(0.216, 0.698, 0.471);
const vec3 kBlackColor = vec3(0.0);
const float kLightPowMin = 0.5;
const float kLightPowMax = 0.8;
const float kFalloff = 0.001;
const float kShadow = 0.1;
const float kReduction = 0.15;
const float kMinIntensity = 0.0;
const float kSmallIntensity = 0.5;
const float kLargeIntensity = 1.5;
const float kLightDepthPower = 16.0;
const float kLightDepthScale = 1.0;
const float kMaxIntensity = 2.5;
const float kShadowScale = 3.0;
const float kOcclusionScale = 4.0;
const float kOcclusionFactor = 0.6;
const float kScreenDepth = 0.5;
const float kPixelStride = 1.0;
const float kMipmapLevel = 1.0;

// The larger the gradient is, the brighter the light source is.
const float kRadianceGradiant = 1.0 / 2.5;
const float kRadianceCutoff = 1.06;
const float kDistanceScale = 2.0;
const float kRadianceOcclusionGradiant = 1.0 / 3.0;
const float kRadianceOcclusionCutoff = 0.001;
const float kIntensityScale = 1.5;
const float kDepthWeight = 0.8;

// Returns the distance field of a 2D circle with anti-aliasing.
float SmoothCircle(in vec2 uv, vec2 origin, float radius) {
  return 1.0 - smoothstep(radius - kAntiAliasing, radius + kAntiAliasing,
                          length(uv - origin));
}

// Returns a simplified distance field of a 3D sphere with anti-aliasing
float SmoothSphere(in vec2 uv, in vec3 origin, in float depth, float radius,
                   float delta) {
  radius = mix(radius - delta, radius + delta, origin.z);
  if (origin.z < depth)
    return 0.0;
  return SmoothCircle(uv, origin.xy, radius);
}

// Relights a scene with distance in 3D, see go/motionlights-doc.
vec3 Relight3D(in vec3 color, in vec3 pos, in vec3 spot) {
  float closeness = pow(spot.z, kLightDepthPower) + 1.0;
  float dist =
      mix(distance(pos.xy, spot.xy), distance(pos.zz, spot.zz), kDepthWeight);
  float intensity = pow(closeness, 1.5) *
                    Radiance(dist, kRadianceGradiant, kRadianceOcclusionCutoff);
  float shadow = Radiance((spot.z - pos.z) * kShadow,
                          kRadianceOcclusionGradiant, kRadianceOcclusionCutoff);

  const float uLightIntensity = 1.5;
  const float uLightContrast = 1.5;

  intensity *= uLightIntensity;
  intensity *= shadow;
  intensity = intensity * 2.0 - 1.0;

  vec3 highlights = pow(color, vec3(1.5 - intensity)) - color;
  vec3 res = color + uLightContrast * abs(0.5 - intensity) * highlights;
  res *= smoothstep(kReduction, kFalloff, dist * (kShadow + kFalloff));

  float occlusion =
      Radiance((spot.z - pos.z) * kOcclusionScale, kRadianceOcclusionGradiant,
               kRadianceOcclusionCutoff) +
      smoothstep(spot.z, pos.z, 0.1);

  // Better contrast but with hard threshold.
  // res = pow(mix(kBlackColor, pow(res, kGammaReciprocal), occlusion *
  // kOcclusionFactor), kGamma);
  return res;
}

// Calculates depth texture UV given screen-space UV.
vec2 ArCoreGetDepthUv(in vec2 uv) {
  vec2 uvTop = mix(_UvTopLeftRight.xy, _UvTopLeftRight.zw, uv.x);
  vec2 uvBottom = mix(_UvBottomLeftRight.xy, _UvBottomLeftRight.zw, uv.x);
  return mix(uvTop, uvBottom, uv.y);
}

// Relights a scene with distance in 3D, see go/motionlights-doc.
vec3 RenderMotionLights(in vec2 uv) {
  float normalized_depth = GetDepth(uv);
  vec3 image_color = GetColor(uv);
  vec2 aspect_ratio = CalculateAspectRatio(uResolution);
  vec2 normalized_uv = NormalizeCoord(uv, aspect_ratio);
  vec2 anchor_uv = ArCoreGetDepthUv(uTouch.xy / uResolution);
  vec2 normalized_touch = NormalizeCoord(anchor_uv, aspect_ratio);
  vec3 result = image_color;
  vec3 spot_pos = vec3(normalized_touch, 1.0 - uTouch.z);

  // Relights the scene in 3D.
  result = Relight3D(result, vec3(normalized_uv, normalized_depth), spot_pos);

  // Renders the light sources.
  result = mix(result, kSpotLightColor,
               SmoothSphere(normalized_uv, spot_pos, normalized_depth,
                            kSpotLightRadius, kSpotLightRadiusDelta));

  return result;
}

vec3 DebugDepth(in vec2 uv) {
  vec3 color = GetColor(uv);
  float depth = GetDepth(uv);
  color = mix(color, VisualizeDepth(depth), 0.7);
  return color;
}
