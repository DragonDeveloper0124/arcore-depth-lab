//-----------------------------------------------------------------------
// <copyright file="MSLightsImageEffectIncludes.glslinc" company="Google LLC">
//
// Copyright 2020 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// </copyright>
//-----------------------------------------------------------------------

const float kArCoreMMToM = 0.001;
const float kArCoreFloatToShort = 65535.0;
const float kArCoreMaxDepthMM = 8192.0;

#define kDebug 0

float ArCoreGetRawDepth(in vec2 uv) {
    return texture(_CurrentDepthTexture, uv).r;
}

// Calculates depth texture UV given screen-space UV.
vec2 GetDepthUV(vec2 uv) {
    vec2 uvTop = mix(_UvTopLeftRight.xy, _UvTopLeftRight.zw, uv.x);
    vec2 uvBottom = mix(_UvBottomLeftRight.xy, _UvBottomLeftRight.zw, uv.x);
    return mix(uvTop, uvBottom, uv.y);
}

// Returns depth value in meters for a given depth texture UV.
float ArCoreGetDepthMeters(in vec2 uv) {
    float depth = ArCoreGetRawDepth(uv) * kArCoreFloatToShort;
    depth = min(depth, kArCoreMaxDepthMM);
    depth *= kArCoreMMToM;
    return depth;
}

float NormalizeDepth(in float depth) {
    float depthRange = _NormalizedDepthMax - _NormalizedDepthMin;
    float normalizedDepth = (depth - _NormalizedDepthMin) / depthRange;
    normalizedDepth = clamp(normalizedDepth, 0.0, 1.0);
    return 1.0 - normalizedDepth;
}

float GetVirtualDepth(vec2 uv) {
    float z = texture(_CameraDepthTexture, uv).r;
    // Used to linearize Z buffer values. x is (1-far/near), y is (far/near), z is (x/far) and w is (y/far).
    float near = 0.1;
    float far = 100.0;
    float y = far / near;
    float x = (1.0 - y);
    vec4 projectionParams = vec4(x, y, x / far, y / far);
    return 1.0 / (projectionParams.z * z + projectionParams.w);
}

// Returns normalized depth where:
// 1.0 corresponds to _NormalizedDepthMin
// 0.0 corresponds to _NormalizedDepthMax
float GetDepth(in vec2 uv) {
    #if kDebug
        return ArCoreGetRawDepth(uv);
    #endif // kDebug
    float realDepth = ArCoreGetDepthMeters(GetDepthUV(uv));
    float virtualDepth = GetVirtualDepth(uv);
    return NormalizeDepth(min(realDepth, virtualDepth));
}

vec3 GetColor(in vec2 uv) {
    return texture(_BackgroundTexture, uv).rgb;
}

// Maps the depth from black to red.
vec3 VisualizeDepth(in float x) {
    float s = step(0.5, x);
    float y = 1.0 - 2.0 * x;
    return vec3(s * max(-0.98, y) + 1.0, (1.0 - s) * y, 0.0);
}
